# Generated by Django 4.1.7 on 2023-03-07 08:49

import api.managers
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Member',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email_address')),
                ('name', models.CharField(max_length=30)),
                ('contact', models.CharField(max_length=13)),
                ('national_id', models.CharField(max_length=30)),
                ('location', models.CharField(max_length=100)),
                ('avatar', models.ImageField(null=True, upload_to='media/')),
                ('is_active', models.BooleanField(default=True)),
                ('is_staff', models.BooleanField(default=False)),
                ('slug', models.SlugField(unique=True)),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', api.managers.CustomUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Association',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('tin_number', models.CharField(max_length=200)),
                ('constitution', models.FileField(upload_to='constitutions/')),
                ('contact', models.CharField(max_length=13)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('members', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='member',
            name='associations',
            field=models.ManyToManyField(related_name='member_association', to='api.association'),
        ),
        migrations.AddField(
            model_name='member',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this member belongs to. A member will get all permissions granted to each of their groups.', related_name='member_groups', to='auth.group'),
        ),
        migrations.AddField(
            model_name='member',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='The permissions this member has.', related_name='member_permissions', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('association', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.association')),
                ('member', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('member', 'association')},
            },
        ),
    ]
